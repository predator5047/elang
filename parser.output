Nonterminals useless in grammar

   PrintExpresion
   Function_Declaration
   Function_Args_Declartion


Terminals unused in grammar

   SEMI_COLON
   FUNC
   PRINT


Rules useless in grammar

   31 PrintExpresion: PRINT L_PAREN Call_Args R_PAREN

   32 Function_Declaration: FUNC Identifier L_PAREN Function_Args_Declartion R_PAREN Block

   33 Function_Args_Declartion: /* empty */
   34                         | Identifier
   35                         | Function_Args_Declartion COMMA Identifier


State 13 conflicts: 1 shift/reduce
State 36 conflicts: 10 shift/reduce
State 37 conflicts: 10 shift/reduce


Grammar

    0 $accept: Program $end

    1 Program: Expressions

    2 Expressions: Expression
    3            | Expressions Expression

    4 Expression: Identifier EQ Expression
    5           | Identifier L_PAREN Call_Args R_PAREN
    6           | Identifier
    7           | Constant
    8           | Expression Operator Expression
    9           | L_PAREN Expression R_PAREN
   10           | IfElseExpression
   11           | Block

   12 Block: L_BRACKET Expressions R_BRACKET
   13      | L_BRACKET R_BRACKET

   14 Call_Args: /* empty */
   15          | Expression
   16          | Call_Args COMMA Expression

   17 IfElseExpression: IF Expression Block ELSE Block

   18 Constant: DOUBLE
   19         | INTEGER

   20 Operator: MINUS
   21         | PLUS
   22         | MULTIPLY
   23         | DIVIDE
   24         | LESS_TH
   25         | LESS_TH_OR_EQ
   26         | GREATER_TH
   27         | GREATER_TH_OR_EQ
   28         | COMP_EQ
   29         | COMP_NEQ

   30 Identifier: IDENTIFIER


Terminals, with rules where they appear

$end (0) 0
error (256)
IDENTIFIER (258) 30
INTEGER (259) 19
DOUBLE (260) 18
EQ (261) 4
COMP_EQ (262) 28
COMP_NEQ (263) 29
LESS_TH (264) 24
GREATER_TH (265) 26
LESS_TH_OR_EQ (266) 25
GREATER_TH_OR_EQ (267) 27
PLUS (268) 21
MINUS (269) 20
DIVIDE (270) 23
MULTIPLY (271) 22
SEMI_COLON (272)
COMMA (273) 16
FUNC (274)
L_PAREN (275) 5 9
R_PAREN (276) 5 9
L_BRACKET (277) 12 13
R_BRACKET (278) 12 13
PRINT (279)
IF (280) 17
ELSE (281) 17


Nonterminals, with rules where they appear

$accept (27)
    on left: 0
Program (28)
    on left: 1, on right: 0
Expressions (29)
    on left: 2 3, on right: 1 3 12
Expression (30)
    on left: 4 5 6 7 8 9 10 11, on right: 2 3 4 8 9 15 16 17
Block (31)
    on left: 12 13, on right: 11 17
Call_Args (32)
    on left: 14 15 16, on right: 5 16
IfElseExpression (33)
    on left: 17, on right: 10
Constant (34)
    on left: 18 19, on right: 7
Operator (35)
    on left: 20 21 22 23 24 25 26 27 28 29, on right: 8
Identifier (36)
    on left: 30, on right: 4 5 6


State 0

    0 $accept: . Program $end

    IDENTIFIER  shift, and go to state 1
    INTEGER     shift, and go to state 2
    DOUBLE      shift, and go to state 3
    L_PAREN     shift, and go to state 4
    L_BRACKET   shift, and go to state 5
    IF          shift, and go to state 6

    Program           go to state 7
    Expressions       go to state 8
    Expression        go to state 9
    Block             go to state 10
    IfElseExpression  go to state 11
    Constant          go to state 12
    Identifier        go to state 13


State 1

   30 Identifier: IDENTIFIER .

    $default  reduce using rule 30 (Identifier)


State 2

   19 Constant: INTEGER .

    $default  reduce using rule 19 (Constant)


State 3

   18 Constant: DOUBLE .

    $default  reduce using rule 18 (Constant)


State 4

    9 Expression: L_PAREN . Expression R_PAREN

    IDENTIFIER  shift, and go to state 1
    INTEGER     shift, and go to state 2
    DOUBLE      shift, and go to state 3
    L_PAREN     shift, and go to state 4
    L_BRACKET   shift, and go to state 5
    IF          shift, and go to state 6

    Expression        go to state 14
    Block             go to state 10
    IfElseExpression  go to state 11
    Constant          go to state 12
    Identifier        go to state 13


State 5

   12 Block: L_BRACKET . Expressions R_BRACKET
   13      | L_BRACKET . R_BRACKET

    IDENTIFIER  shift, and go to state 1
    INTEGER     shift, and go to state 2
    DOUBLE      shift, and go to state 3
    L_PAREN     shift, and go to state 4
    L_BRACKET   shift, and go to state 5
    R_BRACKET   shift, and go to state 15
    IF          shift, and go to state 6

    Expressions       go to state 16
    Expression        go to state 9
    Block             go to state 10
    IfElseExpression  go to state 11
    Constant          go to state 12
    Identifier        go to state 13


State 6

   17 IfElseExpression: IF . Expression Block ELSE Block

    IDENTIFIER  shift, and go to state 1
    INTEGER     shift, and go to state 2
    DOUBLE      shift, and go to state 3
    L_PAREN     shift, and go to state 4
    L_BRACKET   shift, and go to state 5
    IF          shift, and go to state 6

    Expression        go to state 17
    Block             go to state 10
    IfElseExpression  go to state 11
    Constant          go to state 12
    Identifier        go to state 13


State 7

    0 $accept: Program . $end

    $end  shift, and go to state 18


State 8

    1 Program: Expressions .
    3 Expressions: Expressions . Expression

    IDENTIFIER  shift, and go to state 1
    INTEGER     shift, and go to state 2
    DOUBLE      shift, and go to state 3
    L_PAREN     shift, and go to state 4
    L_BRACKET   shift, and go to state 5
    IF          shift, and go to state 6

    $default  reduce using rule 1 (Program)

    Expression        go to state 19
    Block             go to state 10
    IfElseExpression  go to state 11
    Constant          go to state 12
    Identifier        go to state 13


State 9

    2 Expressions: Expression .
    8 Expression: Expression . Operator Expression

    COMP_EQ           shift, and go to state 20
    COMP_NEQ          shift, and go to state 21
    LESS_TH           shift, and go to state 22
    GREATER_TH        shift, and go to state 23
    LESS_TH_OR_EQ     shift, and go to state 24
    GREATER_TH_OR_EQ  shift, and go to state 25
    PLUS              shift, and go to state 26
    MINUS             shift, and go to state 27
    DIVIDE            shift, and go to state 28
    MULTIPLY          shift, and go to state 29

    $default  reduce using rule 2 (Expressions)

    Operator  go to state 30


State 10

   11 Expression: Block .

    $default  reduce using rule 11 (Expression)


State 11

   10 Expression: IfElseExpression .

    $default  reduce using rule 10 (Expression)


State 12

    7 Expression: Constant .

    $default  reduce using rule 7 (Expression)


State 13

    4 Expression: Identifier . EQ Expression
    5           | Identifier . L_PAREN Call_Args R_PAREN
    6           | Identifier .

    EQ       shift, and go to state 31
    L_PAREN  shift, and go to state 32

    L_PAREN   [reduce using rule 6 (Expression)]
    $default  reduce using rule 6 (Expression)


State 14

    8 Expression: Expression . Operator Expression
    9           | L_PAREN Expression . R_PAREN

    COMP_EQ           shift, and go to state 20
    COMP_NEQ          shift, and go to state 21
    LESS_TH           shift, and go to state 22
    GREATER_TH        shift, and go to state 23
    LESS_TH_OR_EQ     shift, and go to state 24
    GREATER_TH_OR_EQ  shift, and go to state 25
    PLUS              shift, and go to state 26
    MINUS             shift, and go to state 27
    DIVIDE            shift, and go to state 28
    MULTIPLY          shift, and go to state 29
    R_PAREN           shift, and go to state 33

    Operator  go to state 30


State 15

   13 Block: L_BRACKET R_BRACKET .

    $default  reduce using rule 13 (Block)


State 16

    3 Expressions: Expressions . Expression
   12 Block: L_BRACKET Expressions . R_BRACKET

    IDENTIFIER  shift, and go to state 1
    INTEGER     shift, and go to state 2
    DOUBLE      shift, and go to state 3
    L_PAREN     shift, and go to state 4
    L_BRACKET   shift, and go to state 5
    R_BRACKET   shift, and go to state 34
    IF          shift, and go to state 6

    Expression        go to state 19
    Block             go to state 10
    IfElseExpression  go to state 11
    Constant          go to state 12
    Identifier        go to state 13


State 17

    8 Expression: Expression . Operator Expression
   17 IfElseExpression: IF Expression . Block ELSE Block

    COMP_EQ           shift, and go to state 20
    COMP_NEQ          shift, and go to state 21
    LESS_TH           shift, and go to state 22
    GREATER_TH        shift, and go to state 23
    LESS_TH_OR_EQ     shift, and go to state 24
    GREATER_TH_OR_EQ  shift, and go to state 25
    PLUS              shift, and go to state 26
    MINUS             shift, and go to state 27
    DIVIDE            shift, and go to state 28
    MULTIPLY          shift, and go to state 29
    L_BRACKET         shift, and go to state 5

    Block     go to state 35
    Operator  go to state 30


State 18

    0 $accept: Program $end .

    $default  accept


State 19

    3 Expressions: Expressions Expression .
    8 Expression: Expression . Operator Expression

    COMP_EQ           shift, and go to state 20
    COMP_NEQ          shift, and go to state 21
    LESS_TH           shift, and go to state 22
    GREATER_TH        shift, and go to state 23
    LESS_TH_OR_EQ     shift, and go to state 24
    GREATER_TH_OR_EQ  shift, and go to state 25
    PLUS              shift, and go to state 26
    MINUS             shift, and go to state 27
    DIVIDE            shift, and go to state 28
    MULTIPLY          shift, and go to state 29

    $default  reduce using rule 3 (Expressions)

    Operator  go to state 30


State 20

   28 Operator: COMP_EQ .

    $default  reduce using rule 28 (Operator)


State 21

   29 Operator: COMP_NEQ .

    $default  reduce using rule 29 (Operator)


State 22

   24 Operator: LESS_TH .

    $default  reduce using rule 24 (Operator)


State 23

   26 Operator: GREATER_TH .

    $default  reduce using rule 26 (Operator)


State 24

   25 Operator: LESS_TH_OR_EQ .

    $default  reduce using rule 25 (Operator)


State 25

   27 Operator: GREATER_TH_OR_EQ .

    $default  reduce using rule 27 (Operator)


State 26

   21 Operator: PLUS .

    $default  reduce using rule 21 (Operator)


State 27

   20 Operator: MINUS .

    $default  reduce using rule 20 (Operator)


State 28

   23 Operator: DIVIDE .

    $default  reduce using rule 23 (Operator)


State 29

   22 Operator: MULTIPLY .

    $default  reduce using rule 22 (Operator)


State 30

    8 Expression: Expression Operator . Expression

    IDENTIFIER  shift, and go to state 1
    INTEGER     shift, and go to state 2
    DOUBLE      shift, and go to state 3
    L_PAREN     shift, and go to state 4
    L_BRACKET   shift, and go to state 5
    IF          shift, and go to state 6

    Expression        go to state 36
    Block             go to state 10
    IfElseExpression  go to state 11
    Constant          go to state 12
    Identifier        go to state 13


State 31

    4 Expression: Identifier EQ . Expression

    IDENTIFIER  shift, and go to state 1
    INTEGER     shift, and go to state 2
    DOUBLE      shift, and go to state 3
    L_PAREN     shift, and go to state 4
    L_BRACKET   shift, and go to state 5
    IF          shift, and go to state 6

    Expression        go to state 37
    Block             go to state 10
    IfElseExpression  go to state 11
    Constant          go to state 12
    Identifier        go to state 13


State 32

    5 Expression: Identifier L_PAREN . Call_Args R_PAREN

    IDENTIFIER  shift, and go to state 1
    INTEGER     shift, and go to state 2
    DOUBLE      shift, and go to state 3
    L_PAREN     shift, and go to state 4
    L_BRACKET   shift, and go to state 5
    IF          shift, and go to state 6

    $default  reduce using rule 14 (Call_Args)

    Expression        go to state 38
    Block             go to state 10
    Call_Args         go to state 39
    IfElseExpression  go to state 11
    Constant          go to state 12
    Identifier        go to state 13


State 33

    9 Expression: L_PAREN Expression R_PAREN .

    $default  reduce using rule 9 (Expression)


State 34

   12 Block: L_BRACKET Expressions R_BRACKET .

    $default  reduce using rule 12 (Block)


State 35

   17 IfElseExpression: IF Expression Block . ELSE Block

    ELSE  shift, and go to state 40


State 36

    8 Expression: Expression . Operator Expression
    8           | Expression Operator Expression .

    COMP_EQ           shift, and go to state 20
    COMP_NEQ          shift, and go to state 21
    LESS_TH           shift, and go to state 22
    GREATER_TH        shift, and go to state 23
    LESS_TH_OR_EQ     shift, and go to state 24
    GREATER_TH_OR_EQ  shift, and go to state 25
    PLUS              shift, and go to state 26
    MINUS             shift, and go to state 27
    DIVIDE            shift, and go to state 28
    MULTIPLY          shift, and go to state 29

    COMP_EQ           [reduce using rule 8 (Expression)]
    COMP_NEQ          [reduce using rule 8 (Expression)]
    LESS_TH           [reduce using rule 8 (Expression)]
    GREATER_TH        [reduce using rule 8 (Expression)]
    LESS_TH_OR_EQ     [reduce using rule 8 (Expression)]
    GREATER_TH_OR_EQ  [reduce using rule 8 (Expression)]
    PLUS              [reduce using rule 8 (Expression)]
    MINUS             [reduce using rule 8 (Expression)]
    DIVIDE            [reduce using rule 8 (Expression)]
    MULTIPLY          [reduce using rule 8 (Expression)]
    $default          reduce using rule 8 (Expression)

    Operator  go to state 30


State 37

    4 Expression: Identifier EQ Expression .
    8           | Expression . Operator Expression

    COMP_EQ           shift, and go to state 20
    COMP_NEQ          shift, and go to state 21
    LESS_TH           shift, and go to state 22
    GREATER_TH        shift, and go to state 23
    LESS_TH_OR_EQ     shift, and go to state 24
    GREATER_TH_OR_EQ  shift, and go to state 25
    PLUS              shift, and go to state 26
    MINUS             shift, and go to state 27
    DIVIDE            shift, and go to state 28
    MULTIPLY          shift, and go to state 29

    COMP_EQ           [reduce using rule 4 (Expression)]
    COMP_NEQ          [reduce using rule 4 (Expression)]
    LESS_TH           [reduce using rule 4 (Expression)]
    GREATER_TH        [reduce using rule 4 (Expression)]
    LESS_TH_OR_EQ     [reduce using rule 4 (Expression)]
    GREATER_TH_OR_EQ  [reduce using rule 4 (Expression)]
    PLUS              [reduce using rule 4 (Expression)]
    MINUS             [reduce using rule 4 (Expression)]
    DIVIDE            [reduce using rule 4 (Expression)]
    MULTIPLY          [reduce using rule 4 (Expression)]
    $default          reduce using rule 4 (Expression)

    Operator  go to state 30


State 38

    8 Expression: Expression . Operator Expression
   15 Call_Args: Expression .

    COMP_EQ           shift, and go to state 20
    COMP_NEQ          shift, and go to state 21
    LESS_TH           shift, and go to state 22
    GREATER_TH        shift, and go to state 23
    LESS_TH_OR_EQ     shift, and go to state 24
    GREATER_TH_OR_EQ  shift, and go to state 25
    PLUS              shift, and go to state 26
    MINUS             shift, and go to state 27
    DIVIDE            shift, and go to state 28
    MULTIPLY          shift, and go to state 29

    $default  reduce using rule 15 (Call_Args)

    Operator  go to state 30


State 39

    5 Expression: Identifier L_PAREN Call_Args . R_PAREN
   16 Call_Args: Call_Args . COMMA Expression

    COMMA    shift, and go to state 41
    R_PAREN  shift, and go to state 42


State 40

   17 IfElseExpression: IF Expression Block ELSE . Block

    L_BRACKET  shift, and go to state 5

    Block  go to state 43


State 41

   16 Call_Args: Call_Args COMMA . Expression

    IDENTIFIER  shift, and go to state 1
    INTEGER     shift, and go to state 2
    DOUBLE      shift, and go to state 3
    L_PAREN     shift, and go to state 4
    L_BRACKET   shift, and go to state 5
    IF          shift, and go to state 6

    Expression        go to state 44
    Block             go to state 10
    IfElseExpression  go to state 11
    Constant          go to state 12
    Identifier        go to state 13


State 42

    5 Expression: Identifier L_PAREN Call_Args R_PAREN .

    $default  reduce using rule 5 (Expression)


State 43

   17 IfElseExpression: IF Expression Block ELSE Block .

    $default  reduce using rule 17 (IfElseExpression)


State 44

    8 Expression: Expression . Operator Expression
   16 Call_Args: Call_Args COMMA Expression .

    COMP_EQ           shift, and go to state 20
    COMP_NEQ          shift, and go to state 21
    LESS_TH           shift, and go to state 22
    GREATER_TH        shift, and go to state 23
    LESS_TH_OR_EQ     shift, and go to state 24
    GREATER_TH_OR_EQ  shift, and go to state 25
    PLUS              shift, and go to state 26
    MINUS             shift, and go to state 27
    DIVIDE            shift, and go to state 28
    MULTIPLY          shift, and go to state 29

    $default  reduce using rule 16 (Call_Args)

    Operator  go to state 30
